{
  "name": "monot",
  "version": "0.1.2",
  "description": "Like [object Date], but unique.",
  "main": "monot.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jed/monot.git"
  },
  "author": {
    "name": "Jed Schmidt",
    "email": "where@jed.is"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "d62724eeaac652c7eb1bf7e1bfab7edd332fbc2d",
  "bugs": {
    "url": "https://github.com/jed/monot/issues"
  },
  "keywords": [
    "date",
    "monotonic",
    "timestamp",
    "unique",
    "sort"
  ],
  "readme": "monot\n=====\n\n[![Build Status](https://travis-ci.org/jed/monot.png?branch=master)](https://travis-ci.org/jed/monot)\n\nmonot creates [JavaScript dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), where each one is greater than the last (also known as _monotonically increasing_). These come in handy when uniqueness is more important than accuracy, such as for creating keys that need to be both unique and sortable.\n\nThe API of a monot date constructor is identical to JavaScript's built-in `Date`, allowing monot to be used as a drop-in replacement for `Date`.\n\nExample\n-------\n\n```javascript\nvar monot = require(\"monot\")\nvar MonotonicDate = monot()\n\n// JavaScript dates are in milliseconds, which means that two\n// created  in a tight loop could be identical...\nconsole.log(new Date().toISOString()) // '2013-06-19T22:28:26.220Z'\nconsole.log(new Date().toISOString()) // '2013-06-19T22:28:26.220Z'\n\n// ...whereas monot dates always increase.\nconsole.log(new MonotonicDate().toISOString()) // '2013-06-19T22:28:26.221Z'\nconsole.log(new MonotonicDate().toISOString()) // '2013-06-19T22:28:26.222Z'\n```\n\nInstallation\n------------\n\n    npm install monot\n\nUsage\n-----\n\n### var MonotonicDate = monot(lastDate)\n\nThis creates a new monotonic Date constructor. All generated dates will be greater than _lastDate_ (which defaults to `Date.now()`). This constructor has the same API as the built-in Date constructor, but returns built-in Date instances.\n\n```javascript\nvar monot = require(\"monot\")\nvar Date = monot()\n\nconsole.log(Date.now()) // 1371682752708\nconsole.log(Date.now()) // 1371682752709\nconsole.log(Date.now()) // 1371682752710\n\nconsole.log(new MonotonicDate instanceof Date) // true\n```\n\nLICENSE\n-------\n\n(The MIT License)\n\nCopyright (c) 2013 Jed Schmidt &lt;where@jed.is&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "monot@0.1.2",
  "dist": {
    "shasum": "1485a524f08d1b36928cbb4bc278a448b9ff3dcf",
    "tarball": "https://registry.npmjs.org/monot/-/monot-0.1.2.tgz"
  },
  "_from": "monot@>=0.1.1 <0.2.0",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "jed",
    "email": "tr@nslator.jp"
  },
  "maintainers": [
    {
      "name": "jed",
      "email": "tr@nslator.jp"
    }
  ],
  "directories": {},
  "_shasum": "1485a524f08d1b36928cbb4bc278a448b9ff3dcf",
  "_resolved": "https://registry.npmjs.org/monot/-/monot-0.1.2.tgz"
}
